input {
  file {
    path => "/usr/share/logstash/data/output/*/csv/findings-*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain
    type => "security_hub_csv"
  }
  
  file {
    path => "/usr/share/logstash/data/output/*/findings-*.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "security_hub_json"
  }
}

filter {
  if [type] == "security_hub_csv" {
    # Skip header line
    if [message] =~ /^AccountId,Title,Severity/ {
      drop {}
    }
    
    csv {
      separator => ","
      columns => [
        "account_id",
        "title",
        "severity",
        "compliance_status",
        "resource_type",
        "resource_id",
        "standards_control",
        "updated_at"
      ]
      skip_empty_columns => true
      remove_field => ["message"]
    }
    
    # Clean up quoted fields
    mutate {
      gsub => [
        "title", '"', "",
        "resource_id", '"', "",
        "standards_control", '"', "",
        "account_id", '"', "",
        "severity", '"', "",
        "compliance_status", '"', "",
        "resource_type", '"', "",
        "updated_at", '"', ""
      ]
    }
    
    # Parse timestamp
    date {
      match => [ "updated_at", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Extract account name from path
    if [path] {
      grok {
        match => { "path" => "/usr/share/logstash/data/output/(?<account_name>[^/]+)/csv/" }
      }
    }
    
    # Add severity level for sorting
    if [severity] == "CRITICAL" {
      mutate { add_field => { "severity_level" => 4 } }
    } else if [severity] == "HIGH" {
      mutate { add_field => { "severity_level" => 3 } }
    } else if [severity] == "MEDIUM" {
      mutate { add_field => { "severity_level" => 2 } }
    } else if [severity] == "LOW" {
      mutate { add_field => { "severity_level" => 1 } }
    } else {
      mutate { add_field => { "severity_level" => 0 } }
    }
    
    # Add compliance score
    if [compliance_status] == "PASSED" {
      mutate { add_field => { "compliance_score" => 100 } }
    } else if [compliance_status] == "WARNING" {
      mutate { add_field => { "compliance_score" => 50 } }
    } else if [compliance_status] == "FAILED" {
      mutate { add_field => { "compliance_score" => 0 } }
    } else {
      mutate { add_field => { "compliance_score" => 0 } }
    }
    
    # Extract resource type category
    if [resource_type] {
      grok {
        match => { "resource_type" => "AwsS3%{GREEDYDATA:resource_category}" }
        tag_on_failure => []
      }
      if !([resource_category]) {
        grok {
          match => { "resource_type" => "AwsEc2%{GREEDYDATA:resource_category}" }
          tag_on_failure => []
        }
      }
      if !([resource_category]) {
        grok {
          match => { "resource_type" => "AwsIam%{GREEDYDATA:resource_category}" }
          tag_on_failure => []
        }
      }
      if !([resource_category]) {
        grok {
          match => { "resource_type" => "Aws%{WORD:resource_category}" }
          tag_on_failure => []
        }
      }
      if !([resource_category]) {
        mutate { add_field => { "resource_category" => "Other" } }
      }
    }
  }
  
  if [type] == "security_hub_json" {
    # Process JSON findings
    if [Findings] {
      split { field => "Findings" }
      
      mutate {
        add_field => {
          "account_id" => "%{[Findings][AwsAccountId]}"
          "title" => "%{[Findings][Title]}"
          "severity" => "%{[Findings][Severity][Label]}"
          "compliance_status" => "%{[Findings][Compliance][Status]}"
          "resource_type" => "%{[Findings][Resources][0][Type]}"
          "resource_id" => "%{[Findings][Resources][0][Id]}"
          "updated_at" => "%{[Findings][UpdatedAt]}"
        }
      }
      
      # Extract account name from path
      if [path] {
        grok {
          match => { "path" => "/usr/share/logstash/data/output/(?<account_name>[^/]+)/findings-" }
        }
      }
      
      # Parse timestamp
      date {
        match => [ "updated_at", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "ISO8601" ]
        target => "@timestamp"
      }
      
      # Add severity level for sorting
      if [severity] == "CRITICAL" {
        mutate { add_field => { "severity_level" => 4 } }
      } else if [severity] == "HIGH" {
        mutate { add_field => { "severity_level" => 3 } }
      } else if [severity] == "MEDIUM" {
        mutate { add_field => { "severity_level" => 2 } }
      } else if [severity] == "LOW" {
        mutate { add_field => { "severity_level" => 1 } }
      } else {
        mutate { add_field => { "severity_level" => 0 } }
      }
      
      # Add compliance score
      if [compliance_status] == "PASSED" {
        mutate { add_field => { "compliance_score" => 100 } }
      } else if [compliance_status] == "WARNING" {
        mutate { add_field => { "compliance_score" => 50 } }
      } else if [compliance_status] == "FAILED" {
        mutate { add_field => { "compliance_score" => 0 } }
      } else {
        mutate { add_field => { "compliance_score" => 0 } }
      }
      
      mutate {
        remove_field => ["Findings"]
      }
    }
  }
  
  # Add geo location for account regions
  if [account_id] {
    mutate {
      add_field => {
        "region" => "eu-central-1"
        "location" => "50.1109,8.6821"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "security-hub-%{+YYYY.MM.dd}"
    document_type => "_doc"
    template_name => "security-hub"
    template_pattern => "security-hub-*"
    template => {
      "index_patterns" => ["security-hub-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "account_id" => { "type" => "keyword" },
          "account_name" => { "type" => "keyword" },
          "title" => { "type" => "text" },
          "severity" => { "type" => "keyword" },
          "severity_level" => { "type" => "integer" },
          "compliance_status" => { "type" => "keyword" },
          "compliance_score" => { "type" => "integer" },
          "resource_type" => { "type" => "keyword" },
          "resource_category" => { "type" => "keyword" },
          "resource_id" => { "type" => "keyword" },
          "region" => { "type" => "keyword" },
          "location" => { "type" => "geo_point" },
          "updated_at" => { "type" => "date" }
        }
      }
    }
  }
  
  stdout {
    codec => rubydebug
  }
}
